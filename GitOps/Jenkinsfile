@Library('Shared') _

pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'  // Or 'ap-south-1' if you're using private ECR
        BACKEND_REPO = 'wanderlust-backend-beta'
        FRONTEND_REPO = 'wanderlust-frontend-beta'
    }

    parameters {
        string(name: 'FRONTEND_DOCKER_TAG', defaultValue: '', description: 'Frontend Docker tag of the image built by the CI job')
        string(name: 'BACKEND_DOCKER_TAG', defaultValue: '', description: 'Backend Docker tag of the image built by the CI job')
    }

    stages {
        stage("Workspace Cleanup") {
            steps {
                script {
                    cleanWs()
                }
            }
        }

        stage('Git: Code Checkout') {
            steps {
                script {
                    code_checkout("https://github.com/farhan24680/Wanderlust-Mega-Project.git", "ecr")
                }
            }
        }

        stage('Verify: Docker Image Tags') {
            steps {
                script {
                    echo "FRONTEND_DOCKER_TAG: ${params.FRONTEND_DOCKER_TAG}"
                    echo "BACKEND_DOCKER_TAG: ${params.BACKEND_DOCKER_TAG}"
                }
            }
        }

        stage("Verify: Docker Images Exist in ECR") {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-cred'
                ]]) {
                    script {
                        def checkImage = { repo, tag ->
                            def result = sh(script: """
                                aws ecr describe-images \
                                  --region ${env.AWS_REGION} \
                                  --repository-name ${repo} \
                                  --image-ids imageTag=${tag} \
                                  --query 'imageDetails[0].imageTags[0]' \
                                  --output text || echo "NOT_FOUND"
                            """, returnStdout: true).trim()

                            if (result == "NOT_FOUND" || result == "None") {
                                error "üö´ Image ${repo}:${tag} does not exist in ECR!"
                            } else {
                                echo "‚úÖ Image ${repo}:${tag} exists in ECR."
                            }
                        }

                        checkImage(env.BACKEND_REPO, params.BACKEND_DOCKER_TAG)
                        checkImage(env.FRONTEND_REPO, params.FRONTEND_DOCKER_TAG)
                    }
                }
            }
        }

        stage("Update: Kubernetes Manifests") {
            steps {
                script {
                    dir('kubernetes') {
                        sh """
                            sed -i 's|wanderlust-backend-beta:.*|wanderlust-backend-beta:${params.BACKEND_DOCKER_TAG}|' backend.yaml
                            sed -i 's|wanderlust-frontend-beta:.*|wanderlust-frontend-beta:${params.FRONTEND_DOCKER_TAG}|' frontend.yaml
                        """
                    }
                }
            }
        }

        stage("Git: Code Update and Push to GitHub") {
            steps {
                script {
                    withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                        sh """
                            git config user.email "tcshoneywell3@gmail.com"
                            git config user.name "Jenkins"

                            git status
                            git add kubernetes/*.yaml
                            git commit -m "Updated Kubernetes manifests with new image tags"
                            git push https://github.com/farhan24680/Wanderlust-Mega-Project.git ecr
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                emailext attachLog: true,
                from: 'tcshoneywell3@gmail.com',
                subject: "‚úÖ Wanderlust Application Updated & Deployed - Build #${env.BUILD_NUMBER}",
                body: """
                    <html>
                    <body>
                        <div style="background-color:#d4edda;padding:10px;">
                            <p><strong>‚úÖ SUCCESS</strong></p>
                            <p><b>Project:</b> ${env.JOB_NAME}</p>
                            <p><b>Build:</b> #${env.BUILD_NUMBER}</p>
                            <p><b>URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'tcshoneywell3@gmail.com',
                mimeType: 'text/html'
            }
        }

        failure {
            script {
                emailext attachLog: true,
                from: 'tcshoneywell3@gmail.com',
                subject: "‚ùå Wanderlust Application Build Failed - Build #${env.BUILD_NUMBER}",
                body: """
                    <html>
                    <body>
                        <div style="background-color:#f8d7da;padding:10px;">
                            <p><strong>‚ùå FAILURE</strong></p>
                            <p><b>Project:</b> ${env.JOB_NAME}</p>
                            <p><b>Build:</b> #${env.BUILD_NUMBER}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'tcshoneywell3@gmail.com',
                mimeType: 'text/html'
            }
        }
    }
}
